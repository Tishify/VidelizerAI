# gpt_structurer.py

import os
from dotenv import load_dotenv
import openai
from loguru import logger

load_dotenv()
openai.api_key = os.getenv("OPENAI_API_KEY")

def structure_conversation(text: str) -> str:
    logger.info("üß† –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –≤ OpenAI –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏—è")

    prompt = (
        "–í–æ—Ç —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –¥–≤—É—Ö —á–µ–ª–æ–≤–µ–∫.\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –µ–≥–æ, –¥–æ–±–∞–≤–∏–≤ –ø–æ–º–µ—Ç–∫–∏, –∫—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç. "
        "–ï—Å–ª–∏ –∏–º–µ–Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–π [–ì–æ–≤–æ—Ä—è—â–∏–π 1] –∏ [–ì–æ–≤–æ—Ä—è—â–∏–π 2].\n\n"
        f"{text}"
    )

    try:
        response = openai.ChatCompletion.create(
            model="gpt-4",  # –ò–ª–∏ gpt-3.5-turbo
            messages=[{"role": "user", "content": prompt}],
            temperature=0.3,
        )

        structured_text = response.choices[0].message.content.strip()
        logger.success("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç OpenAI –ø–æ–ª—É—á–µ–Ω")
        return structured_text

    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ OpenAI")
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞."
