import os
import requests
from loguru import logger
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

try:
    import openai
except ImportError:
    logger.error("‚ùå –ú–æ–¥—É–ª—å `openai` –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏ –µ–≥–æ: `poetry add openai`")
    exit(1)

api_key = os.getenv("OPENAI_API_KEY")
if not api_key:
    logger.error("‚ùå OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")
    exit(1)

openai.api_key = api_key

# üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
logger.info("üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OpenAI API...")

try:
    models = openai.models.list()
    logger.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ. –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏:")
    for m in models.data:
        logger.info(f" - {m.id}")
except Exception as e:
    logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:")
    exit(1)

# üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞
logger.info("üß† –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ (–º–æ–¥–µ–ª—å: gpt-4.1-nano)...")

try:
    response = openai.chat.completions.create(
        model="gpt-4.1-nano",
        messages=[
            {"role": "system", "content": "–¢—ã ‚Äî –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç."},
            {"role": "user", "content": "–ü—Ä–∏–≤–µ—Ç! –°–∫–æ–ª—å–∫–æ –±—É–¥–µ—Ç 2 + 2?"}
        ]
    )
    result = response.choices[0].message.content.strip()
    logger.success(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {result}")
except Exception as e:
    logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞:")

# üí≥ –ë–∞–ª–∞–Ω—Å (–º–æ–∂–µ—Ç –≤–µ—Ä–Ω—É—Ç—å 401 ‚Äî —ç—Ç–æ –æ–∂–∏–¥–∞–µ–º–æ)
logger.info("üí≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞...")

try:
    r = requests.get(
        "https://api.openai.com/v1/dashboard/billing/credit_grants",
        headers={"Authorization": f"Bearer {api_key}"}
    )
    if r.status_code == 200:
        logger.success(f"üí∞ –ë–∞–ª–∞–Ω—Å: {r.json()}")
    else:
        logger.warning(f"‚ö†Ô∏è –°—Ç–∞—Ç—É—Å: {r.status_code} ‚Äî {r.json().get('error', {}).get('message', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')}")
except Exception as e:
    logger.exception("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:")
